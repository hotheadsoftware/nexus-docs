"use strict";(self.webpackChunknexus_docs=self.webpackChunknexus_docs||[]).push([[229],{1212:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var t=a(5893),i=a(1151);const r={sidebar_position:3},s="Adding a New Panel",o={id:"adding-panel",title:"Adding a New Panel",description:"Discussion",source:"@site/docs/adding-panel.md",sourceDirName:".",slug:"/adding-panel",permalink:"/nexus-docs/docs/adding-panel",draft:!1,unlisted:!1,editUrl:"https://github.com/hotheadsoftware/nexus-docs/docs/adding-panel.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Making Use of Nexus",permalink:"/nexus-docs/docs/making-use"}},l={},d=[{value:"Discussion",id:"discussion",level:2},{value:"Procedure",id:"procedure",level:2},{value:"Estimated Completion Time",id:"estimated-completion-time",level:3},{value:"Initial Instructions",id:"initial-instructions",level:3},{value:"Procedure Preparation",id:"procedure-preparation",level:3},{value:"Create the Panel",id:"create-the-panel",level:3},{value:"Create the Model",id:"create-the-model",level:3},{value:"Authentication: Guard",id:"authentication-guard",level:3},{value:"Authentication: Provider",id:"authentication-provider",level:3},{value:"Authentication: Creds",id:"authentication-creds",level:3},{value:"Authentication: Seeder",id:"authentication-seeder",level:3},{value:"Panel Changes",id:"panel-changes",level:3},{value:"Panel Method Calls",id:"panel-method-calls",level:3},{value:"Panel Middleware",id:"panel-middleware",level:3},{value:"Personal Access API Tokens",id:"personal-access-api-tokens",level:3},{value:"Custom Branding",id:"custom-branding",level:3},{value:"Recreate Your Local Tenants",id:"recreate-your-local-tenants",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"adding-a-new-panel",children:"Adding a New Panel"}),"\n",(0,t.jsx)(n.h2,{id:"discussion",children:"Discussion"}),"\n",(0,t.jsx)(n.p,{children:'To support the "Multiple User Tiers, Internal & External Users" possibility,\nwe need to be able to create new Filament panels and quickly wire them into\nthe existing multi-tenancy system. We also probably want to bring along the\ncustom branding functionality and other stuff we\'ve built into the primary\npanels.'}),"\n",(0,t.jsx)(n.p,{children:"The procedure for doing this on a stock Nexus install follows. If you have\nimplemented any customizations of Nexus, you'll need to account for those\nas part of this process."}),"\n",(0,t.jsx)(n.h2,{id:"procedure",children:"Procedure"}),"\n",(0,t.jsx)(n.h3,{id:"estimated-completion-time",children:"Estimated Completion Time"}),"\n",(0,t.jsx)(n.p,{children:"15-60 minutes. As you get more familiar with the operation, it will proceed\nmuch faster."}),"\n",(0,t.jsx)(n.h3,{id:"initial-instructions",children:"Initial Instructions"}),"\n",(0,t.jsx)(n.p,{children:"For the purposes of this procedure, we need to follow some conventions.\nTo make use of this code, you will need to do some replacement operations\nto fill in the values you need."}),"\n",(0,t.jsx)(n.p,{children:"We have provided an example which will create a Buyer model and all the\nnecessary wiring for buyers to log into their own tenant-context panel."}),"\n",(0,t.jsx)(n.p,{children:"Choose the name of your new panel/model/user-type."}),"\n",(0,t.jsx)(n.h3,{id:"procedure-preparation",children:"Procedure Preparation"}),"\n",(0,t.jsxs)(n.p,{children:["Copy this documentation into an editor that supports ",(0,t.jsx)(n.strong,{children:"case-sensitive"})," find/replace."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"replace BUYER with the UPPERCASE name of your desired model.\nreplace buyer with the lowercase name of your desired model.\nreplace Buyer with the Name of your desired model.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-the-panel",children:"Create the Panel"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"artisan make:filament-panel Buyer"})}),"\n",(0,t.jsx)(n.li,{children:"Confirm that the new provider is listed in config/app.php: BuyerPanelProvider::class."}),"\n",(0,t.jsx)(n.li,{children:"Move it to the bottom of the list. We want it to load after the tenancy stuff."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"create-the-model",children:"Create the Model"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"artisan make:model Buyer --migration"})}),"\n",(0,t.jsx)(n.p,{children:"Your Buyer model should extend and implement as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass Buyer extends Authenticatable implements \\OwenIt\\Auditing\\Contracts\\Auditable, FilamentUser\n"})}),"\n",(0,t.jsx)(n.p,{children:"Add this list of traits to your new Model"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:" use Auditable,\n     AuthenticationLoggable,\n     HasApiTokens,\n     HasRoles,\n     Notifiable;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Add the following function to your Model"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"public function canAccessPanel(Panel $panel): bool\n{\n    return $panel->getId() === BuyerPanelProvider::PANEL;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The model-creation command also created a migration."}),"\n",(0,t.jsxs)(n.p,{children:["Move the create_buyers_table migration to the ",(0,t.jsx)(n.code,{children:"database/migrations/tenant/"})," folder."]}),"\n",(0,t.jsx)(n.p,{children:"In the create_users_table migration, copy the contents of the table closure (the fields\nbeing created). Paste these into the create_buyers_table migration. The buyers table will\n(at least initially) be identical to the users table. It can grow over time, but these\nfields should remain in place and unchanged."}),"\n",(0,t.jsx)(n.h3,{id:"authentication-guard",children:"Authentication: Guard"}),"\n",(0,t.jsx)(n.p,{children:"Open config/auth.php and create a new guard in the 'guards' array."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"'buyer' => [\n    'driver'   => 'session',\n    'provider' => 'buyers',\n],\n"})}),"\n",(0,t.jsx)(n.h3,{id:"authentication-provider",children:"Authentication: Provider"}),"\n",(0,t.jsx)(n.p,{children:"... and create a new provider in the 'providers' array:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"'buyers' => [\n    'driver' => 'eloquent',\n    'model'  => App\\Models\\Buyer::class,\n],\n"})}),"\n",(0,t.jsx)(n.h3,{id:"authentication-creds",children:"Authentication: Creds"}),"\n",(0,t.jsx)(n.p,{children:"In .env and .env.example, add some new user keys:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-.env",children:'BUYER_PANEL_USER_NAME="Buyer Person"\nBUYER_PANEL_USER_EMAIL="buyer@localhost.com"\nBUYER_PANEL_USER_PASSWORD="password"\n'})}),"\n",(0,t.jsx)(n.p,{children:"In config/panels.php, add the buyer panel references:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"'buyer' => [\n    'user' => [\n        'name'     => env('BUYER_PANEL_USER_NAME', ''),\n        'email'    => env('BUYER_PANEL_USER_EMAIL', ''),\n        'password' => env('BUYER_PANEL_USER_PASSWORD', ''),\n    ],\n],\n"})}),"\n",(0,t.jsx)(n.h3,{id:"authentication-seeder",children:"Authentication: Seeder"}),"\n",(0,t.jsx)(n.p,{children:"Modify the database/tenants/UserSeeder class. You're going to add logic here for creating\na new Buyer in the tenant context."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"    Buyer::firstOrCreate(['email' => config('panels.buyer.user.email')],\n        [\n            'name'              => config('panels.buyer.user.name'),\n            'email'             => config('panels.buyer.user.email'),\n            'password'          => Hash::make(config('panels.buyer.user.password')),\n            'email_verified_at' => now(),\n        ]\n    );\n"})}),"\n",(0,t.jsx)(n.h3,{id:"panel-changes",children:"Panel Changes"}),"\n",(0,t.jsxs)(n.p,{children:["Now, let's ensure our Panel functionality is in place. Open ",(0,t.jsx)(n.code,{children:"Providers/Filament/BuyerPanelProvider.php"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Add a constant for panel name:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"    public const PANEL = 'buyer';\n"})}),"\n",(0,t.jsx)(n.h3,{id:"panel-method-calls",children:"Panel Method Calls"}),"\n",(0,t.jsx)(n.p,{children:"Add or updated the following method calls to the panel() method's $panel return:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"    ->id(self::PANEL)\n    ->path(self::PANEL)\n    ->spa()\n    ->login()\n    ->registration()\n    ->authGuard(self::PANEL)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:'Note: You can add some dynamic logic to the registration method. If the closure returns true, registration\nwill be enabled. False? The "sign up" link disappears and registration page returns a 404.'})}),"\n",(0,t.jsx)(n.h3,{id:"panel-middleware",children:"Panel Middleware"}),"\n",(0,t.jsx)(n.p,{children:"Add the following middleware to any panel in the Tenant context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"    PreventAccessFromCentralDomains::class,\n    InitializeTenancyByDomain::class,\n"})}),"\n",(0,t.jsx)(n.p,{children:"Customize the panel's default colors array as desired for your own branding."}),"\n",(0,t.jsx)(n.h3,{id:"personal-access-api-tokens",children:"Personal Access API Tokens"}),"\n",(0,t.jsx)(n.p,{children:"If you want to offer Buyers a REST API with personal access tokens, add the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"    ->plugins([\n        BreezyCore::make()\n            ->myProfile(shouldRegisterNavigation: false)\n            ->enableSanctumTokens(permissions: ['create', 'read', 'update', 'delete']),\n    ])\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"You can be as granular as you desire with the token permissions listed. Our example\nis probably too broad for most use-cases."})}),"\n",(0,t.jsx)(n.h3,{id:"custom-branding",children:"Custom Branding"}),"\n",(0,t.jsx)(n.p,{children:"Copy the register() function from OperatePanelProvider. Pase that into your BuyerPanelProvider."}),"\n",(0,t.jsx)(n.p,{children:"If you need a custom logo view for this new panel, copy resources/views/filament/tenant.blade.php\nto a new blade file in the same folder and change the reference in the BuyerPanelProvider's\nregister() function."}),"\n",(0,t.jsx)(n.h2,{id:"recreate-your-local-tenants",children:"Recreate Your Local Tenants"}),"\n",(0,t.jsxs)(n.p,{children:["Note that it's a solid practice to routine perform artisan migrate",":fresh"," --seed so that you're\nconstantly testing your ability to recreate environments from scratch. That's what we recommend\nhere. Destroy and recreate your local environment, then log into each panel and confirm your\nchanges are good."]}),"\n",(0,t.jsxs)(n.p,{children:["artisan migrate",":fresh"," --seed"]}),"\n",(0,t.jsx)(n.p,{children:"NOTE: You don't have to delete/recreate in Production environments! This is purely a convenience\nfor your local environment. In production, we would expect that there will be no users initially.\nThose can be managed by your subscriber in the interface (if you build a Buyers resource) or they\ncan register if registration is enabled."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>o,a:()=>s});var t=a(7294);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);